<templateSet group="MyTemp">
  <template name="nTd" value="new Thread(new Runnable() {&#10;    @Override&#10;    public void run() {&#10;        //需要执行的操作&#10;    }&#10;},&quot;线程名&quot;).start();" description="创建线程" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="addlock" value="lock.lock();&#10;try{&#10;   //需要执行的操作&#10;}catch(Exception e){&#10;    e.printStackTrace();&#10;&#10;}finally {&#10;    lock.unlock();&#10;}" description="add Lock and try" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="MAVEN" value="true" />
      <option name="SQL" value="true" />
    </context>
  </template>
  <template name="dich" value=" int index = -1;&#10;&#9;&#9;int left = 0;&#10;        int right = arr.length-1;&#10;        int mide = (left + right)/2;&#10;        &#10;        while(left&lt;=right){&#10;            if(arr[mid] == value){//如果是基本数据类型，可以使用==比较，如果是引用数据类型，改成equals比较&#10;                index = i;&#10;                break;&#10;            }else if(value &gt; arr[mid]){&#10;                //往右边查找，修改left&#10;                left = mid + 1;&#10;            }else{&#10;                //往左边查找，修改right&#10;                right = mid - 1;&#10;            }&#10;            mid = (left + right)/2;&#10;        }&#10;&#9;}&#10;    if(index==-1){&#10;    &#9;System.out.println(&quot;没找到&quot;);&#10;    }else{&#10;        System.out.println(&quot;下标是：&quot; + index);&#10;    }" description="二分查找法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="bub" value="int[] arr = {5,4,6,3,1};&#10;&#9;&#9;&#10;//冒泡排序，是要经过很多轮，外循环控制轮数 = 元素的个数 - 1&#10;//每一轮是经过多次，每一次是相邻元素的比较&#10;for(int i=1; i&lt;arr.length; i++){&#10;    //从左到右，每一轮的起点arr[0]&#10;    /*&#10;    当i=1,j=0,1,2,3&#9;&#9;j&lt;arr.length-i&#10;    当i=2,j=0,1,2&#10;    ...&#10;    */&#10;    for(int j=0; j&lt;arr.length-i; j++){&#10;        //相邻元素比较    arr[j]与arr[j+1]   arr[j-1]（当j=0，越界）与arr[j]&#10;        //从小到大  ==&gt; 前面的元素 &gt; 后面的元素，交换&#10;        if(arr[j] &gt; arr[j+1]){&#10;            int temp = arr[j];&#10;            arr[j] = arr[j+1];&#10;            arr[j+1] = temp;&#10;        }&#10;    }&#10;}&#10;" description="冒泡排序" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ll" value="List list = new ArrayList();&#10;list=##;&#10;for (Object object : list) {&#10;&#9;&#9;System.out.println(&quot;%%%&quot;+object);&#10;&#9;}" description="new List 并遍历" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="stc" value="System.out.println(Thread.currentThread().getName()+&quot;\t&quot; + number);" description="打印并发线程名" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="thpool" value=" ExecutorService threadPool = new ThreadPoolExecutor(&#10;              2,&#10;              5,&#10;              1L,&#10;              TimeUnit.SECONDS,&#10;              new LinkedBlockingQueue&lt;Runnable&gt;(3),&#10;              Executors.defaultThreadFactory(),&#10;             // new ThreadPoolExecutor.CallerRunsPolicy(),&#10;             /*CallerRunsPolicy：“调用者运行”一种调节机制，该策略既不会抛弃任务，也不&#10;              会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。*/&#10;             // new ThreadPoolExecutor.DiscardOldestPolicy();&#10;             /* 抛弃队列中等待最久的任务，然后把当前任务加人队列中&#10;              尝试再次提交当前任务*/&#10;              //new ThreadPoolExecutor.DiscardPolicy();&#10;              /*该策略默默地丢弃无法处理的任务，不予任何处理也不抛出异常。&#10;              如果允许任务丢失，这是最好的一种策略。*/&#10;              new ThreadPoolExecutor.AbortPolicy());&#10;            //直接抛出RejectedExecutionException异常阻止系统正常运行&#10;" description="创建线程池" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="JMSqueueConsume" value=" public static final String MQ_URL=&quot;tcp://192.168.140.222:61616&quot;;&#10;    public static final String QUEUE_NAME =&quot;queue01&quot;;&#10;    public static void main(String[] args) throws JMSException {&#10;        //1 获得ActiveMQConnectionFactory&#10;        ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(MQ_URL);&#10;        //2 由ActiveMQConnectionFactory获得Connection&#10;        Connection connection = activeMQConnectionFactory.createConnection();&#10;        //3 启动连接准备建立会话&#10;        connection.start();&#10;        //4 获得Session，两个参数先用默认&#10;        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);&#10;        //4.1 是否开启事务&#10;        //4.2 签收模式&#10;        //5 获得目的地，此例是队列&#10;        Queue queue = session.createQueue(QUEUE_NAME);&#10;        //6 获得消息生产者,生产什么内容？生产出来放在哪里？&#10;        MessageConsumer messageConsumer = session.createConsumer(queue);&#10;        //7 生产message内容&#10;         /*&#10;        异步非阻塞方式(监听器onMessage())&#10;        订阅者或接收者通过MessageConsumer的setMessageListener(MessageListener listener)注册一个消息监听器，&#10;        当消息到达之后，系统自动调用监听器MessageListener的onMessage(Message message)方法。*/&#10;         messageConsumer.setMessageListener((message) -&gt; {&#10;             if (null != message &amp;&amp; message instanceof TextMessage) {&#10;                 TextMessage textMessage = (TextMessage)message;&#10;                 try {&#10;                     System.out.println(&quot;***接受到消息： &quot;+textMessage.getText());&#10;                 } catch (Exception e) {&#10;                     e.printStackTrace();&#10;                 }&#10;             }&#10;         });&#10;&#10;        //8 释放各种连接和资源&#10;        messageConsumer.close();&#10;        session.close();&#10;        connection.close();&#10;&#10;    }" description="JMS Consume 异步非阻塞方式(监听器onMessage())" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="JMSproductqueue" value="    public static final String MQ_URL=&quot;tcp://192.168.140.222:61616&quot;;&#10;    public static final String QUEUE_NAME =&quot;queue01&quot;;&#10;    public static void main(String[] args) throws JMSException {&#10;        //1 获得ActiveMQConnectionFactory&#10;        ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(MQ_URL);&#10;        //2 由ActiveMQConnectionFactory获得Connection&#10;        Connection connection = activeMQConnectionFactory.createConnection();&#10;        //3 启动连接准备建立会话&#10;        connection.start();&#10;        //4 获得Session，两个参数先用默认&#10;        //4.1 是否开启事务&#10;        //4.2 签收模式&#10;        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);&#10;        //5 获得目的地，此例是队列&#10;        Queue queue = session.createQueue(QUEUE_NAME);&#10;        //6 获得消息生产者,生产什么内容？生产出来放在哪里？&#10;        MessageProducer producer = session.createProducer(queue);&#10;        &#10;        //7 生产message内容&#10;        for (int i = 1; i &lt;=3; i++)&#10;        {&#10;            TextMessage textMessage = session.createTextMessage(&quot;msg----&quot; + i);//String&#10;            producer.send(textMessage);&#10;        }&#10;        //8 释放各种连接和资源&#10;&#10;        producer.close();&#10;        session.close();&#10;        connection.close();&#10;    }" description="queue 生产者" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="MAVEN" value="true" />
    </context>
  </template>
</templateSet>